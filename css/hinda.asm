.MODEL SMALL
.STACK 100

.DATA
;---CONSTANTS------
C_NEWLINEW EQU 10,13 ;--> STANDS FOR NEW LINE "\N"
MENU_WELCOME_MSG_1 EQU "Welcome to Hinda Service Center$"
MENU_MELCOME_MSG_2 EQU "What would you like to do? $"
MENU_SELECTION_MSG_1 EQU "1. Car Service$"
MENU_SELECTION_MSG_2 EQU "2. Buy a new vehicle $"
MENU_SELECTION_MSG_3 EQU "3. Exit $"
MENU_SELECTION_MSG_4 EQU "Selection > $"
INVALID_MSG EQU "Selection out of range, Enter again!!$"
;---Price of Sale
SALE_PRICE_OPTION1 EQU 5000
SALE_PRICE_OPTION2 EQU 6449
SALE_PRICE_OPTION3 EQU 5799

;---Sale menu
MENU_SALES_MOTOR_MSG1 EQU 'Buy a new vehicle$'  ;12H
MENU_SALES_MOTOR_MSG2 EQU '--All vehicle price displayed are tax excluded$'  ;2FH
MENU_SALES_MOTOR_MSG3 EQU '1. Hinda EX5(RM5000.00)$' ;18H
MENU_SALES_MOTOR_MSG4 EQU '2. Hinda Wave125i(RM6449.00)$' ;1DH
MENU_SALES_MOTOR_MSG5 EQU '3. Hinda Beat(RM5799.00)$'  ;19H
MENU_SALES_MOTOR_MSG6 EQU 'Selection >$'   ;0CH

;---Sales menu msg
SALES_MOTOR_MSG1  EQU 'You have chosen to buy $'  ;18H
SALES_MOTOR_MSG2  EQU ' -> RM $' ;8H
SALES_MOTOR_MSG3  EQU 'Tax(5%) -> RM $' ;0FH
SALES_MOTOR_MSG4  EQU '---Total: RM $'  ;0EH
SALES_MOTOR_MSG5  EQU '---$'  ;04H

;---Pay menu
SALE_PAY EQU 'Pay By:$'  ;08H
SALE_PAY_OPTION1 EQU '1. Cash$'  ;08H
SALE_PAY_OPTION2 EQU '2. Loan$'  ;08H
SALE_PAY_MSG1 EQU 'Please pay by the counter, thank you for choosing us.$'  ;54H

;CAR_SERVICE_MESSAGES CONSTANTS
C_CS_MSG_1 EQU "You Have Chosen Normal Car Service$"
C_CS_MSG_2 EQU "Engine Oil -> RM $"
C_CS_MSG_3 EQU "Brake Fluid -> RM $"
C_CS_MSG_4 EQU "Air Filter -> RM $"
C_CS_MSG_5 EQU "Labor Charges -> RM $"

;MULTIPURPOSE STRING MESSAGES CONSTANTS
TAX_MSG EQU "Tax -> RM $" ;0B STRING SIZE
C_STR_DASH EQU "--$";3H STRING SIZE
C_STR_TOTAL EQU "Total: RM $"
C_BREAK_MSG EQU "========================================$"
C_THANK_YOU_MSG EQU "Please pay by the counter,Thank you for your visit.$"

;CAR_SERVICE_PRICES CONSTANTS
C_ENGINE_OIL EQU 5080
C_BRAKE_FLUID EQU 1800
C_AIR_FILTER EQU 3250
C_LABOR_CHARGES EQU 8000

;---Tax
TAX EQU 5

;----VARIABLES-----
MM_WELCOME_MSG DB MENU_WELCOME_MSG_1,MENU_MELCOME_MSG_2
MM_SELECTION_MSG DB MENU_SELECTION_MSG_1,MENU_SELECTION_MSG_2,MENU_SELECTION_MSG_3,MENU_SELECTION_MSG_4
SELECTION DB ?

;---FUNCTIONAL MENU MESSAGES---
FM_CS_MSG_1 EQU "Car Service$" ;0CH STRING SIZE
FM_CS_MSG_2 EQU "1. Car Wash (RM 20.00)$" ;17H STRING SIZE
FM_CS_MSG_3 EQU "2. Normal Car Service (RM149.99)$" ;21H STRING SIZE
FM_CS_MSG_4 EQU "Selection > $"

;---CAR WASH MESSAGES---
C_WASH_CAR_MSG_1 EQU "You have chosen Car Wash$" ;19H STRING SIZE
C_WASH_CAR_MSG_2 EQU "Car Wash -> RM $" ;10H STRING SIZE

;--MULTIUSED MESSAGES
C_STR_DASH EQU "--$";3H STRING SIZE
C_STR_TOTAL EQU "Total: RM $";0BH STRING SIZE
TAX_MSG EQU "Tax -> RM $" ;0B STRING SIZE
C_BREAK_MSG EQU "========================================$"
C_THANK_YOU_MSG EQU "Please pay by the counter,Thank you for your visit.$"

;---CAR WASH PRICE VALUES---
C_CAR_WASH_PRICE   EQU 2300

;---Continue
CONTINUEMSG EQU "Please type any digit to continue > $"
CONTINUEMSGERR EQU "Invalid Input !!! Please Enter Again ! $"

;---Loan menu
LOAN_MSG1 EQU 'Loan $'
LOAN_MSG2 EQU 'Total: RM$'
LOAN_MSG3 EQU 'How much do you want to pay for down payment?$'
LOAN_MSG4 EQU 'RM: $'
LOAN_MSG5 EQU 'Loan Amount: RM$'
LOAN_MSG6 EQU 'How Long do you want to loan? $'
LOAN_MSG7 EQU 'Min 1 year, Max 5 Years $'
LOAN_MSG8 EQU 'Loan Duration> $'
LOAN_MSG9 EQU 'Loan Duration: $'
LOAN_MSG10 EQU ' Years$'
LOAN_MSG11 EQU 'Total Interest Rate: RM $'
LOAN_MSG12 EQU 'Total Loan Amount: RM $'
LOAN_MSG13 EQU 'Monthly Repayment: RM $'
LOAN_MSG14 EQU 'Please apply the loan at the counter, thank you for choosing us!$'
LOAN_MSG15 EQU 'Inavlid Input! Please enter year between 1 and 5.$'

;---Sale Variable
SALECHOICEVALUE DB ?
SALE_OPTION1 DB 'Honda Ex5$'
SALE_OPTION2 DB 'Honda Wave125i$'
SALE_OPTION3 DB 'Honda Beat$'
SALE_PRICE_OPTION DW ?
SALE_PRICE_OPTION11 DW SALE_PRICE_OPTION1
SALE_PRICE_OPTION22 DW SALE_PRICE_OPTION2
SALE_PRICE_OPTION33 DW SALE_PRICE_OPTION3
SALE_PRICE DB 4 DUP (?)
SALE_SERVICE_TAX DW ?
SALE_SERVICE_TAX1 DW ?
SALE_SERVICE_TAX_D DW ?
SALE_SERVICE_TAX_DIGIT_D DB 2 DUP(?)
SALE_PRICE_DIGIT DB 2 DUP (?)
SALE_PRICE_DIGIT_D DB 4 DUP (?)

;---TAX
SERVICE_TAX DB TAX
TOTALPRICE DB 4 DUP (?)

;---Sale Menu
SALE_MENU DB MENU_SALES_MOTOR_MSG1, MENU_SALES_MOTOR_MSG2, MENU_SALES_MOTOR_MSG3, MENU_SALES_MOTOR_MSG4, MENU_SALES_MOTOR_MSG5, MENU_SALES_MOTOR_MSG6

;---Sale Option
SALE_MENU_OPTION DB SALES_MOTOR_MSG1, SALES_MOTOR_MSG2, SALES_MOTOR_MSG3, SALES_MOTOR_MSG4, SALES_MOTOR_MSG5

;---Pay Menu
SALE_PAY_MENU DB SALE_PAY, SALE_PAY_OPTION1, SALE_PAY_OPTION2, MENU_SALES_MOTOR_MSG6
PAY_MSG DB SALE_PAY_MSG1

;---CAR SERVICE SELECTION MESSAGE---
CS_SELECTION_MSG DB FM_CS_MSG_1,FM_CS_MSG_2,FM_CS_MSG_3,FM_CS_MSG_4
THANK_YOU_MSG DB C_THANK_YOU_MSG

;---Invalid variable
FM_INVALID_MSG DB INVALID_MSG

;---CAR WASH MESSAGES---
WASH_CAR_MSG DB C_WASH_CAR_MSG_1,C_WASH_CAR_MSG_2,TAX_MSG,C_STR_DASH,C_STR_TOTAL
WASH_CAR_PRICE_DIGIT   DB ?,?
WASH_CAR_PRICE_DIGIT_D DB ?,?
CW_SERVICE_TAX_DIGIT_D DB ?,?
WC_TOTAL_PRICE_DIGIT DB ?,?
WC_TOTAL_PRICE_DIGIT_D DB ?,?

;CAR WASH PRICE TO STORE 2200 AND 22			 	
CAR_WASH_PRICE DW C_CAR_WASH_PRICE,?
;CARWASHPRICED STORE .00 
CAR_WASH_PRICE_D DW ?	
CAR_WASH_TOTAL_PRICE DW ?,?
CAR_WASH_TOTAL_PRICE_D DW ?
;CWSERVICETAX TO STORE 1100 AND 1
CW_SERVICE_TAX DW ?,?
CW_SERVICE_TAX_D DW ?

;---NEXTLINE---
NEXTLINE DB C_NEWLINEW,'$' 	;--> EMPTY '\N' STRING
BREAK DB C_BREAK_MSG 

;CAR SERVICE MESSAGES
CS_MSG DB C_CS_MSG_1,C_CS_MSG_2,C_CS_MSG_3,C_CS_MSG_4,C_CS_MSG_5,TAX_MSG,C_STR_DASH,C_STR_TOTAL



;ENGINE OIL PRICE
ENGINE_OIL_PRICE DW C_ENGINE_OIL,?

;ENGINE OIL PRICE (FLOATING POINT VALUE)
ENGINE_OIL_PRICE_F DW ?

;ENGINE OIL PRICE (DISPLAY PURPOSE)
P_ENGINE_OIL_DIGIT DB ?,?

;ENGINE OIL PRICE FLOATING POINT VALUE (DISPLAY PURPOSE)
P_ENGINE_OIL_DIGIT_F DB ?,?

;BRAKE FLUID PRICE
BRAKE_FLUID_PRICE DW C_BRAKE_FLUID,?

;BRAKE FLUID PRICE (FLOATING POINT VALUE)
BRAKE_FLUID_PRICE_F DW ?

;BRAKE FLUID PRICE (DISPLAY PURPOSE)
P_BRAKE_FLUID_DIGIT DB ?,?

;BRAKE FLUID PRICE FLOATING POINT VALUE (DISPLAY PURPOSE)
P_BRAKE_FLUID_DIGIT_F DB ?,?

;AIR FILTER PRICE
AIR_FILTER_PRICE DW C_AIR_FILTER,?

;AIR FILTER PRICE (FLOATING POINT VALUE)
AIR_FILTER_PRICE_F DW ?

;AIR FILTER PRICE (DISPLAY PURPOSE)
P_AIR_FILTER_DIGIT DB ?,?

;AIR FILTER PRICE FLOATING POINT VALUE (DISPLAY PURPOSE)
P_AIR_FILTER_DIGIT_F DB ?,?

;LABOR CHARGES PRICE
LABOR_CHARGE_PRICE DW C_LABOR_CHARGES,?

;LABOR CHARGES PRICE (FLOATING POINT VALUE)
LABOR_CHARGE_PRICE_F DW ?

;LABOR CHARGES PRICE (DISPLAY PURPOSE)
P_LABOR_CHARGE_DIGIT DB ?,?

;LABOR CHARGES PRICE FLOATING POINT VALUE (DISPLAY PURPOSE)
P_LABOR_CHARGE_DIGIT_F DB ?,?

;CAR SERVICE TOTAL GROSS PRICE
CS_GROSS_PRICE DW ?,?

;CAR SERVICE TOTAL GROSS PRICE (FLOATING POINT VALUE)
CS_GROSS_PRICE_F DW ?

;CAR SERVICE TOTAL GROSS PRICE (DISPLAY PURPOSE) --DEBUGGING PURPOSE
CS_GROSS_PRICE_DIGIT DB ?,?,?
CS_GROSS_PRICE_DIGIT_F DB ?,?

;SERVICE TAX PRICE
CS_SERVICE_TAX DW ?,?,?

;SERVICE TAX PRICE(FLOATING POINT VALUE)
CS_SERVICE_TAX_F DB ?,?,?,?

;SERVICE TAX PRICE (DISPLAY PURPOSE)
CS_SERVICE_TAX_DIGIT DB ?,?

;SERVICE TAX PRICE FLOATING POINT VALUE (DISPLAY PURPOSE)
CS_SERVICE_TAX_DIGIT_F DB ?,?

;CS TOTAL PRICE
CS_TOTAL DW ?,?

;CS TOTAL PRICE (FLOATING POINT VALUE)
CS_TOTAL_F DW ?

;CS TOTAL PRICE (DISPLAY PURPOSE)
P_CS_TOTAL_DIGIT DB ?,?,?

;CS TOTAL PRICE FLOATING POINT VALUE (DISPLAY PURPOSE)
P_CS_TOTAL_DIGIT_F DB ?,?

;Continue msg
CONTINUEMSG1 DB CONTINUEMSG
CONTINUEMSGERR1 DB CONTINUEMSGERR

;Loan
LOAN_MENU DB LOAN_MSG1, LOAN_MSG2, LOAN_MSG3, LOAN_MSG4
LOAN_DOWN_PAY_MENU DB LOAN_MSG5, LOAN_MSG6, LOAN_MSG7, LOAN_MSG8, LOAN_MSG15
LOAN_DURATION_MENU DB LOAN_MSG9, LOAN_MSG10, LOAN_MSG11, LOAN_MSG12, LOAN_MSG13, LOAN_MSG14
DOWN_PAYMENT_DIGITS DB 3 DUP (?)
DOWN_PAYMENT_D DW ?
DOWN_PAYMENT DW ?
TOTAL_PAYMENT DW ?
LOAN_AMOUNT DW ?
LOAN_DURATION_YEARS DW ?
TOTAL_INTEREST_RATE DW ?
TOTAL_LOAN_AMOUNT DW ?
MONTHLY_REPAYMENT DW ?

;-----MENU OF LOGIN
 MENU DB  9,9,"+----------------+", 13,10
      DB  9,9,"|    1. Login    |", 13,10        
      DB  9,9,"|    2. Exit     |", 13,10
      DB  9,9,"+----------------+", 13,10,13,10, "$"

 CHOOSE DB 9,"PLEASE ENTER YOUR SELECTION: $"
 CHOSEN DB ?
 ID   DB 13,10,9,9,"UserID: $"   
 PASS DB 9,9,"Password: $"
 UID  DB "ABC123"      ;ID had define
 UPSW DB "ABC123"      ;Password had define
 IID1  LABEL BYTE
 MAX  DB 7
 ACT  DB ?
 IID  DB 7 DUP ("$")
 IPSW DB 6 DUP (?)
 MSG1 DB 13,10,9, "Incorrect Input, ENTER AGAIN !!", 13,10, "$"
 MSG2 DB 9, 1," THANKS FOR YOU USING OUR SYSTEM ! ! ! ", 1,"$"
 ;Change for re-enter ID and Password
 MSG3 DB 9,"You Are Still Allow Re-Enter $"
 MSG4 DB " Times !!$"
 MSG5 DB 9,"Your Chances Already Finish !! $"
 ERRL DB 9,9,"Access Denied !! $"
 CHANCE DB 6
 AST DB "*$"
.CODE
MAIN PROC FAR
   MOV AX,@DATA
   MOV DS,AX
   ;Clear screen
   MOV AH, 0
   MOV AL, 02
   INT 10H

LOGINM:
   
   ;Display login menu
   MOV AH,09H
   LEA DX,MENU
   INT 21H

   LEA DX, CHOOSE
   INT 21H

   MOV AH, 01H
   INT 21H
   
   
   ;IF AL NOT ABOVE OR EQUAL 1
   CMP AL, 31H
   JNAE ERROR
   
   ;IF AL ABOVE 2
   CMP AL, 32H
   JA ERROR

   ;IF AL = 1
   CMP AL, 31H
   JE PROMPT
   
   ;IF AL = 2
   CMP AL, 32H
   JMP EXIT

ERROR:
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H

   MOV AH, 02H
   MOV DL, 9
   INT 21H

   MOV AH, 09H
   LEA DX, FM_INVALID_MSG   ;If selection out of range
   INT 21H

   LEA DX, NEXTLINE
   INT 21H

   LEA DX, NEXTLINE
   INT 21H
   JMP LOGINM

PROMPT:   
   MOV BL, CHANCE      ;First Chance - 1 = 5
   DEC BL
   MOV CHANCE, BL

   ;Display Enter ID
   MOV AH,09H
   LEA DX,ID
   INT 21H
   
   ;Prompt user enter ID
   MOV AH, 0AH
   LEA DX, IID1
   INT 21H
   
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H

   ;Display Enter password
   MOV AH, 09H
   LEA DX, PASS
   INT 21H
   
   MOV CX, 6
   MOV SI, 0
DISPLAYAST:
   ;Enter password
   MOV AH, 07H
   INT 21H
   MOV IPSW[SI], AL
   ;Display symbol * when user input password
   MOV AH, 09H
   LEA DX, AST
   INT 21H
   ;SI + 1
   INC SI
   LOOP DISPLAYAST

   MOV SI,0
CHK: 
   CMP SI,6      
   JE BEFOREMM_INITIAL    ;If ID and Password are correct, go to main menu
   JNE CHKNEXT
   
CHKNEXT:
   SUB BL, BL       ;Clear the BL
   MOV BL, UID[SI]
   CMP IID[SI], BL  ;Check the ID user input is it correct
   JE CHKNEXT2
   JNE CHKERR
   
CHKNEXT2:
   SUB BL, BL       ;Clear the BL
   MOV BL, UPSW[SI] 
   CMP IPSW[SI], BL ;Check the password user input is it correct
   JE NEXT2
   JNE CHKERR

NEXT2:
   ;SI + 1 and move back CHK
   INC SI
   JMP CHK

CHKERR: 
   
   CMP CHANCE, 0
   ;If still have the chance, display access denied
   JNE ERROR1
   ;If chance is finish, quit the program
   JMP EXIT1
   
ERROR1:
   
   MOV AH, 09H
   ;NEWLINE
   LEA DX, NEXTLINE
   INT 21H
   LEA DX, NEXTLINE
   INT 21H
   
   ;DISPLAY ACCESS DENIED
   LEA DX, ERRL
   INT 21H
   ;NEWLINE
   LEA DX, NEXTLINE
   INT 21H

   LEA DX, MSG3
   INT 21H
   ;Display chance still can re-enter the ID and Password 
   ADD CHANCE, 30H
   MOV AH, 02H
   MOV DL, CHANCE
   INT 21H

   SUB CHANCE, 30H

   MOV AH, 09H
   LEA DX, MSG4
   INT 21H

   LEA DX, NEXTLINE
   INT 21H
   ;If ID or password is wrong, prompt user re-enter again
   JMP PROMPT

  ;Clear screen
   MOV AH, 0
   MOV AL, 02
   INT 10H
BEFOREMM_INITIAL:
   ;Clear screen
   MOV AH, 0
   MOV AL, 02
   INT 10H
   
;Main menu
MM_INITIAL:
		MOV CX,2
		MOV SI,0
		MOV AH,09H
;Print welcome message
PRINT_WELCOME:	
		LEA DX,MM_WELCOME_MSG[SI]
		INT 21H
		
		LEA DX,NEXTLINE
		INT 21H
		
		ADD SI,20H
		LOOP PRINT_WELCOME
;Display main menu
PRINT_MSG_SELECTION:
		MOV SI,0
		LEA DX,MM_SELECTION_MSG[SI]
		INT 21H
		
		LEA DX,NEXTLINE
		INT 21H
		
		MOV SI,0FH
		LEA DX,MM_SELECTION_MSG[SI]
		INT 21H
		
		LEA DX,NEXTLINE
		INT 21H
		
		ADD SI,16H
		LEA DX,MM_SELECTION_MSG[SI]
		INT 21H

		LEA DX,NEXTLINE
		INT 21H	
		
		LEA DX,NEXTLINE
		INT 21H	

		ADD SI,9H
		LEA DX,MM_SELECTION_MSG[SI]
		INT 21H
	
MM_USER_INPUT_SELECTION:
        ;Prompt the user input the selection
		MOV AH,01H
		INT 21H
		;Store the selection that user input
		MOV SELECTION,AL
		
MM_INPUT_VALIDATION:
        ;If the selection not above 0, move to error
		CMP SELECTION,30H ;ASCII = "0"
		JNA MM_INVALID
		;If the selection not below or equal 3, move to error, 
		;else go to selection checking
		CMP SELECTION,33H ;ASCII = "3"
		JBE MM_VALID 
		JA MM_INVALID
		
MM_VALID:
   CMP SELECTION, 31H    ;Selection 1 = car service
   JE SELECTION1
   CMP SELECTION, 32H    ;Selection 2 = buy vehicle
   JE SELECTION2
   CMP SELECTION, 33H    ;Selection 3 = exit the program
   JMP EXIT

SELECTION1:              
   ;Selection 1 go to car service module
   JMP BEFOREFM_CS_INITIAL
SELECTION2:
   ;Selection 2 go to sale menu
   JMP BEFORESALEMENU

MM_INVALID:
	MOV AH,09H
	
	LEA DX,NEXTLINE
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	;Selection out of range
	LEA DX,FM_INVALID_MSG
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	;Jump back main menu
	JMP MM_INITIAL

BEFOREFM_CS_INITIAL:
   ;Clear screen
   MOV AH, 0
   MOV AL, 02
   INT 10H
;---Car service module
FM_CS_INITIAL:
	MOV AH,09H
	MOV SI,0H
   LEA DX, NEXTLINE
   INT 21H

	LEA DX,CS_SELECTION_MSG[SI]
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	ADD SI,0CH
	LEA DX,CS_SELECTION_MSG[SI]
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	ADD SI,17H
	LEA DX,CS_SELECTION_MSG[SI]
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	ADD SI,21H
	LEA DX,CS_SELECTION_MSG[SI]
	INT 21H

FM_USER_INPUT_SELECTION:
	MOV AH,01H
	INT 21H
	MOV SELECTION,AL
	
FM_INPUT_VALIDATION:	
	CMP SELECTION,31H
	JB ERRORSELECTION

    CMP SELECTION, 32H
    JA ERRORSELECTION

    JMP WASHSELECTION

ERRORSELECTION:
    MOV AH, 09H
    LEA DX, NEXTLINE
    INT 21H
    LEA DX, NEXTLINE
    INT 21H
    ;If out of the range of the selection
    LEA DX, FM_INVALID_MSG
    INT 21H 
    LEA DX, NEXTLINE
    INT 21H
    LEA DX, NEXTLINE
    INT 21H
	;Jump back Car service module
    JMP FM_CS_INITIAL

WASHSELECTION:
    ;If the selection is 1, go to wash car module
    CMP SELECTION,31H
	JE WASH_CAR
    ;If the selection is 2, go to normal car service module
    CMP SELECTION, 32H
    JMP CS_INITIAL

;Car wash module
WASH_CAR:
   ;Clear screen
   MOV AH, 0
   MOV AL, 02
   INT 10H

;PRINT WASH CAR MODULE MESSAGES
	MOV AH,09H
	
	LEA DX,NEXTLINE
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	MOV SI,0
	LEA DX,WASH_CAR_MSG[SI]
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	LEA DX,BREAK
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	ADD SI,19H
	LEA DX,WASH_CAR_MSG[SI]
	INT 21H

;SEPERATE DECIMAL POINTS AND DECIMAL VALUES
	MOV SI,0 	;SI = 0
	MOV DX,0
	MOV AX,CAR_WASH_PRICE[SI] ;AX = 2000
	MOV BX,100 ;BX = 100
	DIV BX ;2000 / 100 = 20
	MOV SI,2 ;SI = 2
	MOV CAR_WASH_PRICE[SI],AX ;CARWASHPRICE[1] = 20
	MOV CAR_WASH_PRICE_D,DX ;CARWASHPRICED = 00
	MOV BX,10	;BX = 10
	DIV BL 	;20/10 = 2.0
	MOV SI,0	;SI = 0
	MOV WASH_CAR_PRICE_DIGIT[SI],AL
	MOV SI,1		;SI = 1
	MOV WASH_CAR_PRICE_DIGIT[SI],AH

;PRINT DECIMAL VALUES
	MOV AH,02H
	MOV SI,0		;SI = 0
	MOV DL,WASH_CAR_PRICE_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
	MOV SI,1		;SI = 1
	MOV DL,WASH_CAR_PRICE_DIGIT[SI]
	ADD DL,30H
	INT 21H

;PRINT "."
	MOV DL,2EH
	INT 21H
	
;CALCULATE DECIMAL POINT VALUE
	MOV AX,CAR_WASH_PRICE_D
	MOV BL,10	;BL = 10
	MOV BH,0
	DIV BL		;0/0 = 0
	MOV SI,0
	MOV WASH_CAR_PRICE_DIGIT_D[SI],AL
	INC SI
	MOV WASH_CAR_PRICE_DIGIT_D[SI],AH
	
;PRINT DECIMAL POINT VALUE
	MOV AH,02H
	DEC SI		;SI = 0
	MOV DL,WASH_CAR_PRICE_DIGIT_D[SI]
	ADD DL,30H
	INT 21H
	
	INC SI		;SI = 1
	MOV DL,WASH_CAR_PRICE_DIGIT_D[SI]
	ADD DL,30H
	INT 21H
	
	MOV AH,09H
	LEA DX,NEXTLINE
	INT 21H
	
;PRINT TAX -> RM
	MOV AH,09H
	ADD SI,28H
	LEA DX,WASH_CAR_MSG[SI]
	INT 21H
	
;CALCULATE TAX
	;2200 * 5 = 11,000
	;11,000 / 10 = 110
	MOV SI,0
	MOV AX,CAR_WASH_PRICE[SI]
	MOV BH,0
	MOV BL,SERVICE_TAX
	MUL BX
	MOV BX,100
	DIV BX
	MOV CW_SERVICE_TAX[SI],AX ;[0] = 110
	MOV BX,100
	DIV BX
	MOV SI,2
	MOV CW_SERVICE_TAX[SI],AX ;[1] = 1
	MOV CW_SERVICE_TAX_D,DX ;DX= 10
	MOV AX,CW_SERVICE_TAX_D ;AX = 10
	MOV BX,10 ;BX=10
	DIV BL
	MOV SI,0
	MOV CW_SERVICE_TAX_DIGIT_D[SI],AL ;AL = 1
	INC SI
	MOV CW_SERVICE_TAX_DIGIT_D[SI],AH ;AH = 0
		
		
;PRINT TAX AMOUNT
	MOV AH,02H
	MOV SI,2
	MOV DX,CW_SERVICE_TAX[SI]
	ADD DX,30H
	INT 21H
	
	;PRINT "."
	MOV DL,2EH
	INT 21H
	
	MOV SI,0
	MOV DH,0
	MOV DL,CW_SERVICE_TAX_DIGIT_D[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,CW_SERVICE_TAX_DIGIT_D[SI]
	ADD DL,30H
	INT 21H
	
	MOV AH,09H
	LEA DX,NEXTLINE
	INT 21H

;PRINT TOTAL MESSAGE
	MOV SI,34H
	LEA DX,WASH_CAR_MSG[SI]
	INT 21H
	
	MOV SI,37H
	LEA DX,WASH_CAR_MSG[SI]
	INT 21H

;CALCULATE
	MOV SI,0
	MOV AX,CAR_WASH_PRICE[SI]
	MOV BX,CW_SERVICE_TAX[SI]
	ADD AX,BX ;2200 + 110 = 2310
	MOV CAR_WASH_TOTAL_PRICE[SI],AX
	MOV DX,0
	MOV BX,100
	DIV BX
	MOV SI,2
	MOV CAR_WASH_TOTAL_PRICE[SI],AX
	MOV CAR_WASH_TOTAL_PRICE_D,DX
	
;SEPERATE TOTAL PRICE DIGITS
	MOV BX,10
	MOV SI,0
	DIV BL
	MOV WC_TOTAL_PRICE_DIGIT[SI],AL
	INC SI
	MOV WC_TOTAL_PRICE_DIGIT[SI],AH
	
	MOV SI,0
	MOV AX,DX
	DIV BL
	MOV WC_TOTAL_PRICE_DIGIT_D[SI],AL
	INC SI
	MOV WC_TOTAL_PRICE_DIGIT_D[SI],AH

;PRINT TOTAL PRICE
	MOV AH,02H
	MOV DH,0
	MOV SI,0
	MOV DL,WC_TOTAL_PRICE_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,WC_TOTAL_PRICE_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
	;PRINT "."
	MOV DL,2EH
	INT 21H
	
	DEC SI
	MOV DL,WC_TOTAL_PRICE_DIGIT_D[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,WC_TOTAL_PRICE_DIGIT_D[SI]
	ADD DL,30H
	INT 21H
	
	MOV AH,09H
	MOV SI,34H
	LEA DX,WASH_CAR_MSG[SI]
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	LEA DX,THANK_YOU_MSG
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H
	
	LEA DX,NEXTLINE
	INT 21H

	;Jump to ask user continue
	JMP ASKCONTINUE

;Normal Car sevice module
CS_INITIAL:
   ;Clear screen
   MOV AH, 0
   MOV AL, 02
   INT 10H
;PRINT CS_MSG[0]="You Have Chosen Normal Car Service$"
   MOV SI,0H
	MOV AH,09H
	LEA DX,CS_MSG[SI]
	INT 21H

;PRINT NEXTLINE
	LEA DX,NEXTLINE
	INT 21H
	
;PRINT BREAK
	LEA DX,BREAK
	INT 21H

;PRINT NEXTLINE
	LEA DX,NEXTLINE
	INT 21H
	
;PRINT CS_MSG[1]="Engine Oil -> RM"
	MOV SI,23H
	LEA DX,CS_MSG[SI]
	INT 21H
	
;SEPERATE ENGINE OIL PRICE DECIMAL AND FLOATING POINTS
	MOV SI,0
	MOV DX,0
	MOV AX,ENGINE_OIL_PRICE[SI]
	MOV BX,100
	DIV BX
	MOV SI,2
	MOV ENGINE_OIL_PRICE[SI],AX
	MOV ENGINE_OIL_PRICE_F,DX


;SEPERATE DIGITS IN DECIMAL VALUES READY FOR PRINTING
	MOV BX,10
	DIV BL
	MOV SI,0
	MOV P_ENGINE_OIL_DIGIT[SI],AL
	MOV SI,1
	MOV P_ENGINE_OIL_DIGIT[SI],AH

;PRINT ENGINE OIL PRICE DECIMAL VALUES
	MOV AH,02H
	MOV SI,0
	MOV DL,P_ENGINE_OIL_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
	MOV SI,1
	MOV DL,P_ENGINE_OIL_DIGIT[SI]
	ADD DL,30H
	INT 21H

;PRINT "."
	MOV DL,2EH
	INT 21H
	
;SEPERATE DIGITS IN FLOATING POINT VALUES READY FOR PRINTING
	MOV AX,ENGINE_OIL_PRICE_F
	MOV BL,10
	MOV BH,0
	DIV BL
	MOV SI,0
	MOV P_ENGINE_OIL_DIGIT_F[SI],AL
	INC SI
	MOV P_ENGINE_OIL_DIGIT_F[SI],AH
	
;PRINT FLOATING POINT VALUE
	MOV AH,02H
	MOV SI,0
	MOV DL,P_ENGINE_OIL_DIGIT_F[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,P_ENGINE_OIL_DIGIT_F[SI]
	ADD DL,30H
	INT 21H

;PRINT NEXTLINE	
	MOV AH,09H
	LEA DX,NEXTLINE
	INT 21H
	
;PRINT CS_MSG[2]="Brake Fluid -> RM "
	MOV SI,35H
	LEA DX,CS_MSG[SI]
	INT 21H
	
;SEPERATE BRAKE FLUID PRICE DECIMAL AND FLOATING POINTS
	MOV SI,0
	MOV DX,0
	MOV AX,BRAKE_FLUID_PRICE[SI]
	MOV BX,100
	DIV BX
	MOV SI,2
	MOV BRAKE_FLUID_PRICE[SI],AX
	MOV BRAKE_FLUID_PRICE_F,DX

;SEPERATE DIGITS IN DECIMAL VALUES READY FOR PRINTING
	MOV BX,10
	DIV BL
	MOV SI,0
	MOV P_BRAKE_FLUID_DIGIT[SI],AL
	MOV SI,1
	MOV P_BRAKE_FLUID_DIGIT[SI],AH

;PRINT BRAKE FLUID PRICE DECIMAL VALUES
	MOV AH,02H
	MOV SI,0
	MOV DL,P_BRAKE_FLUID_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
	MOV SI,1
	MOV DL,P_BRAKE_FLUID_DIGIT[SI]
	ADD DL,30H
	INT 21H
;PRINT "."
	MOV DL,2EH
	INT 21H

;SEPERATE DIGITS IN FLOATING POINT VALUES READY FOR PRINTING
	MOV AX,BRAKE_FLUID_PRICE_F
	MOV BL,10
	MOV BH,0
	DIV BL
	MOV SI,0
	MOV P_BRAKE_FLUID_DIGIT_F[SI],AL
	INC SI
	MOV P_BRAKE_FLUID_DIGIT_F[SI],AH
	
;PRINT FLOATING POINT VALUE
	MOV AH,02H
	MOV SI,0
	MOV DL,P_BRAKE_FLUID_DIGIT_F[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,P_BRAKE_FLUID_DIGIT_F[SI]
	ADD DL,30H
	INT 21H

;PRINT NEXTLINE	
	MOV AH,09H
	LEA DX,NEXTLINE
	INT 21H
	
;PRINT CS_MSG[3]="Air Filter -> RM "
	MOV SI,48H
	LEA DX,CS_MSG[SI]
	INT 21H
	
;SEPERATE AIR FILTER PRICE DECIMAL AND FLOATING POINTS
	MOV SI,0
	MOV DX,0
	MOV AX,AIR_FILTER_PRICE[SI]
	MOV BX,100
	DIV BX
	MOV SI,2
	MOV AIR_FILTER_PRICE[SI],AX
	MOV AIR_FILTER_PRICE_F,DX

;SEPERATE DIGITS IN DECIMAL VALUES READY FOR PRINTING
	MOV BX,10
	DIV BL
	MOV SI,0
	MOV P_AIR_FILTER_DIGIT[SI],AL
	MOV SI,1
	MOV P_AIR_FILTER_DIGIT[SI],AH

;PRINT AIR FILTER PRICE DECIMAL VALUES
	MOV AH,02H
	MOV SI,0
	MOV DL,P_AIR_FILTER_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
	MOV SI,1
	MOV DL,P_AIR_FILTER_DIGIT[SI]
	ADD DL,30H
	INT 21H
;PRINT "."
	MOV DL,2EH
	INT 21H

;SEPERATE DIGITS IN FLOATING POINT VALUES READY FOR PRINTING
	MOV AX,AIR_FILTER_PRICE_F
	MOV BL,10
	MOV BH,0
	DIV BL
	MOV SI,0
	MOV P_AIR_FILTER_DIGIT_F[SI],AL
	INC SI
	MOV P_AIR_FILTER_DIGIT_F[SI],AH
	
;PRINT FLOATING POINT VALUE
	MOV AH,02H
	MOV SI,0
	MOV DL,P_AIR_FILTER_DIGIT_F[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,P_AIR_FILTER_DIGIT_F[SI]
	ADD DL,30H
	INT 21H

;PRINT NEXTLINE	
	MOV AH,09H
	LEA DX,NEXTLINE
	INT 21H

;PRINT CS_MSG[4]="Labor Charges -> RM"
	MOV SI,5AH
	LEA DX,CS_MSG[SI]
	INT 21H
	
;SEPERATE LABOR CHARGES PRICE DECIMAL AND FLOATING POINTS
	MOV SI,0
	MOV DX,0
	MOV AX,LABOR_CHARGE_PRICE[SI]
	MOV BX,100
	DIV BX
	MOV SI,2
	MOV LABOR_CHARGE_PRICE[SI],AX
	MOV LABOR_CHARGE_PRICE_F,DX

;SEPERATE DIGITS IN DECIMAL VALUES READY FOR PRINTING
	MOV BX,10
	DIV BL
	MOV SI,0
	MOV P_LABOR_CHARGE_DIGIT[SI],AL
	MOV SI,1
	MOV P_LABOR_CHARGE_DIGIT[SI],AH

;PRINT AIR FILTER PRICE DECIMAL VALUES
	MOV AH,02H
	MOV SI,0
	MOV DL,P_LABOR_CHARGE_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
	MOV SI,1
	MOV DL,P_LABOR_CHARGE_DIGIT[SI]
	ADD DL,30H
	INT 21H
;PRINT "."
	MOV DL,2EH
	INT 21H

;SEPERATE DIGITS IN FLOATING POINT VALUES READY FOR PRINTING
	MOV AX,LABOR_CHARGE_PRICE_F
	MOV BL,10
	MOV BH,0
	DIV BL
	MOV SI,0
	MOV P_LABOR_CHARGE_DIGIT_F[SI],AL
	INC SI
	MOV P_LABOR_CHARGE_DIGIT_F[SI],AH
	
;PRINT FLOATING POINT VALUE
	MOV AH,02H
	MOV SI,0
	MOV DL,P_LABOR_CHARGE_DIGIT_F[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,P_LABOR_CHARGE_DIGIT_F[SI]
	ADD DL,30H
	INT 21H

;PRINT NEXTLINE	
	MOV AH,09H
	LEA DX,NEXTLINE
	INT 21H

;CALCULATE GROSS TOTAL PRICE DECIMAL
	MOV SI,0
	MOV AX,ENGINE_OIL_PRICE[SI] ;AX = 53
	MOV BX,BRAKE_FLUID_PRICE[SI] ;BX = 50
	ADD AX,BX  ;AX = 103
	MOV BX,AIR_FILTER_PRICE[SI] ;BX = 15
	ADD AX,BX ;AX = 118
	MOV BX,LABOR_CHARGE_PRICE[SI] ;BX = 20
	ADD AX,BX ;AX = 138
	MOV CS_GROSS_PRICE[SI],AX ;AX = 13812

;SEPERATE DECIMAL AND FLOAT VALUES
	MOV DX,0
	MOV BX,100
	DIV BX
	MOV SI,2
	MOV CS_GROSS_PRICE[SI],AX ;CS_GROSS_PRICE[2] = 138
	MOV CS_GROSS_PRICE_F,DX	 ;CS_GROSS_PRICE_F = 12

;PRINT CS_MSG[5]="Tax -> RM "
	MOV AH,09H
	MOV SI,6FH
	LEA DX,CS_MSG[SI]
	INT 21H

;CALCULATE TAX DECIMAL VALUE
	MOV SI,2
	MOV AX,CS_GROSS_PRICE[SI] ;AX = 138
	MOV BX,0 ;BH = 0
	MOV BL,SERVICE_TAX ;BL = 5
	MUL BL ;138 * 5 = 690
	MOV SI,0
	MOV CS_SERVICE_TAX[SI],AX ;CS_SERVICE_TAX[0] = 690
	MOV BX,100 ;BX = 100
	MOV DX,0 ;CLEAR DX
	DIV BX ;690 / 100 = 6
	MOV SI,2
	MOV CS_SERVICE_TAX[SI],AX ;CS_SERVICE_TAX[2] = 6
	
	MOV SI,4
	MOV CS_SERVICE_TAX[SI],DX ;CS_SERVICE_TAX[4] = 90
	
;CALCULATE TAX FLOATING POINT VALUE
	MOV AX,CS_GROSS_PRICE_F ;AX = 12
	MOV BX,0	;CLEAR BX
	MOV BL,SERVICE_TAX ;BL = 5
	MUL BX ;AX = 60 (12 * 5 =60)
	MOV BX,10 ;BX = 10
	MOV DX,0 ;CLEAR DX
	DIV BX ;60 / 10 = 6.0
	MOV DX,0 ;CLEAR DX
	DIV BX ;6/10 = 0.6
	MOV SI,0 ;SI = 0
	MOV CS_SERVICE_TAX_F[SI],AL ;CS_SERVICE_TAX_F[0] = 0
	MOV SI,1
	MOV CS_SERVICE_TAX_F[SI],DL ;CS_SERVICE_TAX_F[1] = 6
	
;COMPARE TAX FLOATING POINT VALUE FOR ROUND OFF
	MOV SI,1
	CMP CS_SERVICE_TAX_F[SI],4 ;COMPARE CS_SERVICE_TAX_F[1] WITH 4
	JA CS_ROUND_OFF 
	
;SET CS_SERVICE_TAX_F[2] = 0 (NO ROUND OFF)
	MOV AX,0 
	MOV SI,2
	MOV CS_SERVICE_TAX_F[SI],0
	JMP CS_RETURN_0

CS_ROUND_OFF:
;ROUND OFF IF LARGER THAN 4
	MOV AX,1
	MOV SI,2
	MOV CS_SERVICE_TAX_F[SI],AL

CS_RETURN_0:
;ASSIGN NEW VALUE WITH ROUND OFF 
	MOV SI,0
	MOV AL,CS_SERVICE_TAX_F[SI]
	MOV SI,2
	MOV BL,CS_SERVICE_TAX_F[SI]
	ADD AL,BL
	MOV SI,3
	MOV CS_SERVICE_TAX_F[SI],AL

;ADD SERVICE_TAX FLOATING VALUE WITH ROUND OFF
	MOV SI,4
	MOV AX,CS_SERVICE_TAX[SI]
	MOV SI,3
	MOV BH,0
	MOV BL,CS_SERVICE_TAX_F[SI]
	ADD AX,BX
	MOV SI,4
	MOV CS_SERVICE_TAX_F[SI],AL
	
;SEPERATE DIGIT IN FLOAT VALUES READY FOR PRINTING
	MOV AX,0
	MOV SI,4
	MOV AL,CS_SERVICE_TAX_F[SI]
	MOV BX,10
	MOV DX,0
	DIV BL
	MOV SI,0
	MOV CS_SERVICE_TAX_DIGIT_F[SI],AL
	INC SI
	MOV CS_SERVICE_TAX_DIGIT_F[SI],AH

;CALCULATE THE TOTAL PRICE AFTER ADDING TAX (FLOATING)
	MOV AX,CS_GROSS_PRICE_F
	MOV SI,4
	MOV BX,0
	MOV BL,CS_SERVICE_TAX_F[SI]
	ADD AX,BX
	MOV CS_TOTAL_F,AX

;CMP IF ABOVE 100 ROUND OFF
	CMP CS_TOTAL_F,100
	JAE CS_ROUND_OFF_1
	JB CONTINUE_1

CS_ROUND_OFF_1:
	MOV AX,CS_TOTAL_F
	MOV BX,100
	SUB AX,BX
	MOV CS_TOTAL_F,AX
	MOV SI,2
	INC CS_GROSS_PRICE[SI]

;SEPERATE FLOATING DIGITS READY FOR PRINTING
CONTINUE_1:
	MOV AX,CS_TOTAL_F
	MOV BX,10
	MOV DX,0
	DIV BX
	MOV SI,0
	MOV P_CS_TOTAL_DIGIT_F[SI],AL
	INC SI
	MOV P_CS_TOTAL_DIGIT_F[SI],DL

;SEPERATE DIGITS IN DECIMAL VALUES READY FOR PRINTING
	MOV SI,2
	MOV AX,CS_SERVICE_TAX[SI] ;AX = 6
	MOV BX,10 ;BX = 10
	MOV DX,0 ;CLEAR DX
	DIV BX ;6 / 10 = 0.6
	MOV SI,0 
	MOV CS_SERVICE_TAX_DIGIT[SI],AL
	INC SI
	MOV CS_SERVICE_TAX_DIGIT[SI],DL
	
;CMP TO REMOVE 0
	MOV SI,0
	CMP CS_SERVICE_TAX_DIGIT[SI],0
	JE CS_PRINT_DECIMAL_5

;PRINT DECIMAL VALUES
	MOV AH,02H
	MOV SI,0
	MOV DL,CS_SERVICE_TAX_DIGIT[SI]
	ADD DL,30H
	INT 21H

CS_PRINT_DECIMAL_5:
	MOV AH,02H
	MOV SI,1
	MOV DL,CS_SERVICE_TAX_DIGIT[SI]
	ADD DL,30H
	INT 21H

;PRINT "."
	MOV DL,2EH
	INT 21H
	

;PRINT FLOATING VALUES
	MOV DX,0
	MOV AH,02H
	MOV SI,0
	MOV DL,CS_SERVICE_TAX_DIGIT_F[SI]
	ADD DL,30H
	INT 21H

	MOV SI,1
	MOV DL,CS_SERVICE_TAX_DIGIT_F[SI]
	ADD DL,30H
	INT 21H

;PRINT NEXTLINE
	MOV AH,09H
	LEA DX,NEXTLINE
	INT 21H
	
;PRINT TOTAL
	MOV SI,7AH
	LEA DX,CS_MSG[SI]
	INT 21H

	MOV SI,7DH
	LEA DX,CS_MSG[SI]
	INT 21H

;CALCULATE THE TOTAL PRICE AFTER ADDING TAX (DECIMAL)
	MOV SI,2
	MOV AX,CS_GROSS_PRICE[SI] ;AX = 139
	MOV BX,CS_SERVICE_TAX[SI] ;BX = 6
	ADD AX,BX ;139 + 6 = 144
	MOV SI,0
	MOV CS_TOTAL[SI],AX ;CS_TOTAL[0] = 145

;SEPERATE DECIMAL DIGITS READY FOR PRINTING
	MOV SI,0
	MOV AX,CS_TOTAL[SI] ;AX = 145
	MOV BX,10 ;BX = 10
	MOV DX,0 ;CLEAR DX
	DIV BX ;145 / 10 = 14.5
	MOV SI,2
	MOV P_CS_TOTAL_DIGIT[SI],DL
	DEC SI
	MOV DX,0
	DIV BX
	MOV P_CS_TOTAL_DIGIT[SI],DL
	DEC SI
	MOV P_CS_TOTAL_DIGIT[SI],AL
	
;PRINT DECIMAL VALUES
	MOV AX,0
	MOV DX,0
	MOV SI,0
	MOV AH,02H
	MOV DL,P_CS_TOTAL_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,P_CS_TOTAL_DIGIT[SI]
	ADD DL,30H
	INT 21H	
	
	INC SI
	MOV DL,P_CS_TOTAL_DIGIT[SI]
	ADD DL,30H
	INT 21H
	
;PRINT "."
	MOV DL,2EH
	INT 21H

;PRINT FLOATING VALUES
	MOV SI,0
	MOV DL,P_CS_TOTAL_DIGIT_F[SI]
	ADD DL,30H
	INT 21H
	
	INC SI
	MOV DL,P_CS_TOTAL_DIGIT_F[SI]
	ADD DL,30H
	INT 21H
	
	MOV AH,09H
	MOV SI,7AH
	LEA DX,CS_MSG[SI]
	INT 21H
   
   ;Jump to ask user continue
   JMP ASKCONTINUE

BEFORESALEMENU:
   ;Clear screen
   MOV AH, 0
   MOV AL, 02
   INT 10H

;Sale menu
SALEMENU:
   MOV SI, 0
   
   MOV AH, 09H
   ;NEWLINE
   LEA DX, NEXTLINE
   INT 21H

   LEA DX, NEXTLINE
   INT 21H
   
   ;DISPLAY SALE MENU
   LEA DX, SALE_MENU[SI]
   INT 21H

   LEA DX, NEXTLINE
   INT 21H

   ADD SI, 12H
   LEA DX, SALE_MENU[SI]
   INT 21H

   LEA DX, NEXTLINE
   INT 21H

   ADD SI, 2FH
   LEA DX, SALE_MENU[SI]
   INT 21H
   
   LEA DX, NEXTLINE
   INT 21H

   ADD SI, 18H
   LEA DX, SALE_MENU[SI]
   INT 21H
   
   LEA DX, NEXTLINE
   INT 21H

   ADD SI, 1DH
   LEA DX, SALE_MENU[SI]
   INT 21H
   
   LEA DX, NEXTLINE
   INT 21H

   ADD SI, 19H
   LEA DX, SALE_MENU[SI]
   INT 21H

SALE_SELECT:
   ;Prompt user input selection
   MOV AH, 01H
   INT 21H
   
   JMP CHECKSALE

CHECKSALE:
   ;Check the value of input by user whether is it between 1 to 3
   CMP AL, 31H
   JB SALEERROR
   JA CHECKSALE1

CHECKSALE1:
   CMP AL, 33H
   JA SALEERROR
   JMP SALECHOICE

SALEERROR:    ;If Out Of Range Of Selection
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H
   ;Display invalid selection msg
   LEA DX, FM_INVALID_MSG
   INT 21H
   ;Jump back sale menu
   JMP SALEMENU

SALECHOICE:
   ;Store the selection
   MOV SALECHOICEVALUE, AL
   ;If choose selection 1
   CMP AL, 31H
   JE SALECHOICE1
   ;If choose selection 2
   CMP AL, 32H
   JE SALECHOICE2
   ;If choose selection 3
   CMP AL, 33H
   JE SALECHOICE3

SALECHOICE1:
   SUB AX, AX
   SUB BX, BX
   ;If user select vehicle 1, store the price
   MOV AX, SALE_PRICE_OPTION11
   MOV SALE_PRICE_OPTION, AX
   ;Jump selection 1
   JMP SALEOPTION

SALECHOICE2:
   SUB AX, AX
   SUB BX, BX
   ;If user select vehicle 2, store the price
   MOV AX, SALE_PRICE_OPTION22
   MOV SALE_PRICE_OPTION, AX
   ;Jump selection 2
   JMP SALEOPTION

SALECHOICE3:
   SUB AX, AX
   SUB BX, BX
   ;If user select vehicle 3, store the price
   MOV AX, SALE_PRICE_OPTION33
   MOV SALE_PRICE_OPTION, AX
   ;Jump selection 3
   JMP SALEOPTION

SALEOPTION:  ;Selection 1
   MOV SI, 0
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H
   LEA DX, NEXTLINE
   INT 21H

   LEA DX, SALE_MENU_OPTION[SI]
   INT 21H
   
   CMP SALECHOICEVALUE, 31H    ;Find the vehicle name for the sale choice
   JE DISPLAY1
   CMP SALECHOICEVALUE, 32H
   JE DISPLAY2
   CMP SALECHOICEVALUE, 33H
   JE DISPLAY3

   ;Display vehicle name
DISPLAY1:
   LEA DX, SALE_OPTION1
   INT 21H
   JMP CONTINUESALEMENU

DISPLAY2:
   LEA DX, SALE_OPTION2
   INT 21H
   JMP CONTINUESALEMENU

DISPLAY3:
   LEA DX, SALE_OPTION3
   INT 21H
   JMP CONTINUESALEMENU

CONTINUESALEMENU:            ;Continue display the sale menu 
   LEA DX, NEXTLINE
   INT 21H

   CMP SALECHOICEVALUE, 31H  ;Find the vehicle name for the sale choice 
   JE DISPLAY11
   CMP SALECHOICEVALUE, 32H
   JE DISPLAY22
   CMP SALECHOICEVALUE, 33H
   JE DISPLAY33
   
   ;Display vehicle name
DISPLAY11:
   LEA DX, SALE_OPTION1
   INT 21H
   JMP CONTINUESALEMENU1

DISPLAY22:
   LEA DX, SALE_OPTION2
   INT 21H
   JMP CONTINUESALEMENU1

DISPLAY33:
   LEA DX, SALE_OPTION3
   INT 21H
   JMP CONTINUESALEMENU1
   
   ;Continue display the sale menu
CONTINUESALEMENU1:
   ADD SI, 18H
   LEA DX, SALE_MENU_OPTION[SI]
   INT 21H
   
   ;Price of the vehicle 
   MOV DI,3
   MOV DX,0

   MOV AX,SALE_PRICE_OPTION ;AX = 5000
   MOV BX,10         ;BX = 10
   DIV BX            ;5000 / 10 = 500.0

   MOV CX, 2
DECIMAL:
   MOV SALE_PRICE[DI],DL        ;[3] = 0, [2] = 0
   MOV DX,0          ;CLEAR DX
   DIV BX            ;500/10 = 50.0 , 50/10 = 5.0
   DEC DI            ;DI = 2 , 1
   LOOP DECIMAL

   MOV SALE_PRICE[DI],DL ;[1] = 0
   DEC DI                ;DI = 0
   MOV SALE_PRICE[DI],AL ;[0] = 5
 
    MOV AX,0
    MOV DX,0
    MOV DI,0
    MOV CX,4
    MOV AH,02H
    
    ;Display the vehicle price
OPTION:
   MOV DL,SALE_PRICE[DI]
   ADD DL,30H
   INT 21H
   INC DI
   LOOP OPTION
   ;PRINT "."
	MOV DL,2EH
	INT 21H
	MOV DI,0
   MOV CX, 2

OPTIONDIGIT: 
    MOV DL, SALE_PRICE_DIGIT[DI]
    ADD DL, 30H
    INT 21H
    INC DI
    LOOP OPTIONDIGIT

   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H
   
   ;Display TAX
   ADD SI, 08H
   LEA DX, SALE_MENU_OPTION[SI]
   INT 21H

   ;CALCULATE TAX
   MOV BX, 0
	MOV AX,SALE_PRICE_OPTION  ;5000
	MOV BL,SERVICE_TAX          ;5
	MUL BX                      ;25000
	MOV BX,100            
	DIV BX                      ;250.00 
    
	MOV SALE_SERVICE_TAX,AX          ;Store decimal
   MOV SALE_SERVICE_TAX1,AX         ;Store decimal
	MOV SALE_SERVICE_TAX_D,DX        ;Store floating point
	MOV AX,SALE_SERVICE_TAX_D
	MOV BX,10
	DIV BL

    ;Store Decimal Point
	MOV DI,0
	MOV SALE_SERVICE_TAX_DIGIT_D[DI],AL   ;STORE FLOATING POINT
	INC DI
	MOV SALE_SERVICE_TAX_DIGIT_D[DI],AH   ;STORE FLOATING POINT
	SUB BX, BX
    SUB AX, AX
    SUB DX,DX

    MOV DI, 1
    MOV AX,SALE_SERVICE_TAX    ;250
    MOV BX, 100

    DIV BX
    MOV SALE_PRICE_DIGIT_D[DI], AL    ;STORE 2
    INC DI
    
    MOV SALE_SERVICE_TAX, DX
    MOV AX, SALE_SERVICE_TAX
    MOV BX, 10
    DIV BL
    MOV SALE_PRICE_DIGIT_D[DI], AL    ;STORE 5
    INC DI
    MOV SALE_PRICE_DIGIT_D[DI], AH    ;STORE 0

    ;PRINT TAX AMOUNT
	MOV AH,02H
	MOV DI, 1
    MOV CX, 3

SALEDECI1:
	MOV AH,02H
    ADD SALE_PRICE_DIGIT_D[DI],30H
	MOV DL,SALE_PRICE_DIGIT_D[DI]
	INT 21H
    INC DI
	LOOP SALEDECI1
    
	;PRINT "."
	MOV DL,2EH
	INT 21H
	MOV DI,0
    MOV CX, 2

SALEDIGIT:
	MOV DL,SALE_SERVICE_TAX_DIGIT_D[DI]
    ADD DL,30H
	INT 21H
	INC DI
    LOOP SALEDIGIT
   
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H

   ADD SI, 0FH
   LEA DX, SALE_MENU_OPTION[SI]
   INT 21H

   ;CALCUALTE TOTAL   
   SUB AX, AX 
   SUB DX, DX
   SUB BX, BX
   MOV DI, 3
   MOV AX, SALE_PRICE_OPTION    ;5000
   MOV BX, SALE_SERVICE_TAX1    ;250
   ADD AX, BX                   ;5250

   MOV BX,10         ;BX = 10
   DIV BX            ;5250 / 10 = 525.0

   MOV CX, 2
CALTOTALDECIMAL:
   MOV TOTALPRICE[DI],DL        ;[3] = 0, [2] = 5
   MOV DX,0          ;CLEAR DX
   DIV BX            ;525/10 = 52.5 , 52/10 = 5.2
   DEC DI            ;DI = 2 , 1
   LOOP CALTOTALDECIMAL

   MOV  TOTALPRICE[DI],DL ;[1] = 2
   DEC DI                ;DI = 0
   MOV  TOTALPRICE[DI],AL ;[0] = 5
   
   ;Print Total
   MOV CX, 4
   MOV DI, 0
   MOV AH, 02H

   ;Calculate decimal point for 5% tax + normal price and display it
DISPLAYTOTAL:
   MOV DL, TOTALPRICE[DI]
   ADD DL, 30H
   INT 21H
   INC DI
   LOOP DISPLAYTOTAL
   
	;PRINT "."
	MOV DL,2EH
	INT 21H
   MOV DI, 0
   MOV CX, 2
   
TOTALDECI:
   MOV BL, SALE_SERVICE_TAX_DIGIT_D[DI]
   MOV AL, SALE_PRICE_DIGIT[DI]
   ADD AL, BL
   ADD AL, 30H
   MOV DL, AL
   INT 21H
   INC DI
   LOOP TOTALDECI

   MOV AH, 09H
   ADD SI, 0EH
   LEA DX, SALE_MENU_OPTION[SI]
   INT 21H

   LEA DX, NEXTLINE
   INT 21H
   
   JMP PAYMENU

PAYMENU:
   ;Display pay menu
   MOV SI, 0
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H
   LEA DX, NEXTLINE
   INT 21H

   LEA DX, SALE_PAY_MENU[SI]
   INT 21H 

   LEA DX, NEXTLINE
   INT 21H
   
   ADD SI, 08H
   LEA DX, SALE_PAY_MENU[SI]
   INT 21H 

   LEA DX, NEXTLINE
   INT 21H
   
   ADD SI, 08H
   LEA DX, SALE_PAY_MENU[SI]
   INT 21H 

   LEA DX, NEXTLINE
   INT 21H
   
   ADD SI, 08H
   LEA DX, SALE_PAY_MENU[SI]
   INT 21H 
   
   MOV AH, 01H
   INT 21H

CHECKPAY:
   ;If the selection is invalid
   CMP AL, 31H
   JB PAYERROR
   CMP AL, 32H
   JA PAYERROR
   JMP PAYOPTION

PAYERROR:
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H
   ;Invalid selection msg
   LEA DX, FM_INVALID_MSG
   INT 21H

   JMP PAYMENU

PAYOPTION:
   ;If 1 go to Cash Msg
   CMP AL, 31H
   JE PAYMSG
   
   ;If 2 go to Loan Menu
   CMP AL, 32H
   JE LOANMENU

PAYMSG:
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H

   LEA DX, NEXTLINE
   INT 21H
   
   ;CASH MSG
   LEA DX, PAY_MSG
   INT 21H

   LEA DX, NEXTLINE
   INT 21H

   LEA DX, NEXTLINE
   INT 21H

   ;Jump to ask user continue
   JMP ASKCONTINUE
;Loan Menu
LOANMENU:          
      ;DISPLAY LOAN MENU
    MOV SI, 0
    MOV AH, 09H
    LEA DX, NEXTLINE
    INT 21H
    LEA DX, NEXTLINE
    INT 21H

   LEA DX, LOAN_MENU[SI]
   INT 21H 

   LEA DX, NEXTLINE
   INT 21H
   
   ADD SI, 06H
    LEA DX, LOAN_MENU[SI]
   INT 21H 

   ;Print Total
   MOV CX, 4
   MOV DI, 0
   MOV AH, 02H
DISPLAYTOTAL_:
   MOV DL, TOTALPRICE[DI]
   ADD DL, 30H
   INT 21H
   INC DI
   LOOP DISPLAYTOTAL_
   
	;PRINT "."
	MOV DL,2EH
	INT 21H
   MOV DI, 0
   MOV CX, 2

TOTALDECI1: ;PRINT TOTAL DECIMALS
   MOV DL, SALE_SERVICE_TAX_DIGIT_D[DI]
   ADD DL, 30H
   INT 21H
   INC DI
   LOOP TOTALDECI1

    ;PRINT NEXT LOAN MENU
    mov ah, 09

    LEA DX, NEXTLINE
   INT 21H
    LEA DX, NEXTLINE
   INT 21H

    add si, 0Ah
    LEA DX, LOAN_MENU[SI]   
   INT 21H 

    LEA DX, NEXTLINE
   INT 21H

    ;PRINT GET DOWN PAYMENT
    add si, 02eh
    LEA DX, LOAN_MENU[SI]
    INT 21H 

    ;GET DOWN PAYMENT
    mov ah, 01
    mov cx, 3
    mov di, 0
get_down_payment:
    mov ah, 01
    int 21H
    sub al, 30h
    mov DOWN_PAYMENT_DIGITS[di], al     ;STORE DOWN PAYMENTS DIGIT WISE
    inc di
    loop get_down_payment

next_loan:  ;MAKE ACTUAL DOWN PAYMENT FROM DIGITS AND STORE INTO DOWN_PAYMENT
    mov ax, 0
    mov cx, 3
    mov di, 0
    mov bx, 10
make_down_payment:
    mul bx
    mov dl, DOWN_PAYMENT_DIGITS[di]
    add al, dl
    adc ah, 0
    inc di
    loop make_down_payment
    mov DOWN_PAYMENT, AX

    ;MAKE ACTUAL TOTAL PAYMENT FROM DIGITS AND STORE INTO TOTAL_PAYMENT
    mov ax, 0
    mov cx, 4
    mov di, 0
    mov bx, 10
make_total_payment:
    mul bx
    mov dl, TOTALPRICE[di]
    add al, dl
    adc ah, 0
    inc di
    loop make_total_payment
    mov TOTAL_PAYMENT, ax

;CALCULATE LOAN AMOUNT = TOTAL_AMOUNT - DOWN_PAYMENT
    mov bx, DOWN_PAYMENT
    sub ax, bx
    mov LOAN_AMOUNT, ax 

;PRINTING NEXT MENU STATEMENTS
    mov ah, 09
    LEA DX, NEXTLINE
    INT 21H

    mov si, 0
    LEA DX, LOAN_DOWN_PAY_MENU[SI]
    INT 21H 

;PRINTING LOAN PAYMENT DIGIT WISE 
;LET LOAN_PAYMENT = 123
;SO 123/10 => Q=12 AND R=3 SO PUSH R
;THEN 12/10  => Q=1 AND R=2 SO PUSH R
;THEN 1/10 => Q=0 AND R=1 SO PUSH R
;UNTIL Q=0
    mov ax, LOAN_AMOUNT
    mov cx, 0
print_loan_payment:
    cmp ax, 0
    je print_loan_payment2
    mov dx, 0
    mov bx, 10
    div bx
    push dx
    inc cx
    jmp print_loan_payment

    ;THEN GET DIGIT WISE FROM STACK AND PRINT
    print_loan_payment2:
    pop dx
    add dl, 48
    mov ah, 02
    int 21h
    loop print_loan_payment2
    
   ;PRINT "."
   MOV DL,2EH
   INT 21H
   MOV DI, 0
   MOV CX, 2

TOTALDECI_1: ;PRINT TOTAL DECIMALS AFTER AMOUNT DOWN

   MOV DL, SALE_SERVICE_TAX_DIGIT_D[DI]
   ADD DL, 30H
   INT 21H
   INC DI
   LOOP TOTALDECI_1


;PRINT NEXT MENU STATEMENTS
    mov ah, 09
    LEA DX, NEXTLINE
    INT 21H

    LEA DX, NEXTLINE
    INT 21H

    add si, 16d
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

    LEA DX, NEXTLINE
    INT 21H

    add si, 31d
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

    LEA DX, NEXTLINE
    INT 21H

    add si, 25d

;PRINT GET LOAN DURATION YEARS 
duration_:
    mov ah, 09
    LEA DX, NEXTLINE
    INT 21H
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

;GET LOAN DURATION YEARS 
    mov ah, 01
    int 21H
    cmp al, 31H         ;COMPARE FOR GREATER THAN EQUAL TO 1
    jb err_duration_
    cmp al, 35h         ;COMPARE FOR LESS THAN EQUAL TO 5
    ja err_duration_
    jmp end_duration_input

err_duration_:      ;PRINT NEXT MENU STATEMENTS
    mov ah, 09
    LEA DX, NEXTLINE
    INT 21H
    add si, 16d 
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21h
    sub si, 16d
	LEA DX, NEXTLINE
	INT 21H
    jmp duration_

;STORE DURATION YEARS IN LOAN_DURATION_YEARS
end_duration_input:
    sub al, 30h             
    mov bl, al
    mov ah, 0
    mov LOAN_DURATION_YEARS, ax

;PRINT NEXT MENU STATEMENTS
    mov ah, 09
    LEA DX, NEXTLINE
    INT 21H
    LEA DX, NEXTLINE
    INT 21H

    add si, 16d
    add si, 50d
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

;PRINT LOAN DURATION YEAR
    mov ah, 02
    mov dl, bl
    add dl, 30H
    int 21H

;PRINT NEXT LOAN MENU STATEMENTS
    mov ah, 09

    add si, 16d
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

    LEA DX, NEXTLINE
    INT 21H

    add si, 7d
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

;CALCULATE TOTAL_INTEREST_RATE = LOAN_AMOUNT*LOAN_DURATION_YEARS*0.03 
; 0.03 = 3/100
    mov ax, LOAN_AMOUNT
    mov bx, LOAN_DURATION_YEARS
    mul bx
    mov bx, 3
    mul bx
    mov bx, 100
    div bx
    mov TOTAL_INTEREST_RATE, ax

;PRINT TOTAL_INTEREST_RATE
    mov ax, TOTAL_INTEREST_RATE
    mov cx, 0
print_total_interest_rate:
    cmp ax, 0
    je print_total_interest_rate2
    mov dx, 0
    mov bx, 10
    div bx
    push dx
    inc cx
    jmp print_total_interest_rate

    print_total_interest_rate2:
    pop dx
    add dl, 48
    mov ah, 02
    int 21h
    loop print_total_interest_rate2

;PRINT NEXT LOAN MENU STATEMENTS
    mov ah, 09
    LEA DX, NEXTLINE
    INT 21H

    add si, 25d
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

;CALCULATE TOTAL_LOAN_AMOUNT = LOAN_AMOUNT - TOTAL_INTEREST_RATE
    mov ax, LOAN_AMOUNT
    mov bx, TOTAL_INTEREST_RATE
    add ax, bx
    mov TOTAL_LOAN_AMOUNT, ax

;PRINT TOTAL_LOAN_AMOUNT
    mov ax, TOTAL_LOAN_AMOUNT
    mov cx, 0
print_total_loan_amount:
    cmp ax, 0
    je print_total_loan_amount2
    mov dx, 0
    mov bx, 10
    div bx
    push dx
    inc cx
    jmp print_total_loan_amount

    print_total_loan_amount2:
    pop dx
    add dl, 48
    mov ah, 02
    int 21h
    loop print_total_loan_amount2

;PRINT NEXT MENU STATEMENTS
    mov ah, 09
    LEA DX, NEXTLINE
    INT 21H

    add si, 23d
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

;CALCULATE MONTHLY_REPAYMENT = (LOAN_DURATION_MONTHS*12)/TOTAL_LOAN_AMOUNT
    mov ax, LOAN_DURATION_YEARS
    mov bx, 12
    mul bx
    mov bx, TOTAL_LOAN_AMOUNT
    xchg bx, ax
    div bx
    mov MONTHLY_REPAYMENT, ax

;PRINT MONTHLY_REPAYMENT
    mov ax, MONTHLY_REPAYMENT
    mov cx, 0
print_monthly_repayment:
    cmp ax, 0
    je print_monthly_repayment2
    mov dx, 0
    mov bx, 10
    div bx
    push dx
    inc cx
    jmp print_monthly_repayment

    print_monthly_repayment2:
    pop dx
    add dl, 48
    mov ah, 02
    int 21h
    loop print_monthly_repayment2

;PRINT ENDING LOAN MENU STATEMENTS
    mov ah, 09
    LEA DX, NEXTLINE
    INT 21H

    add si, 22d
    lea dx, LOAN_DOWN_PAY_MENU[si]
    int 21H

    LEA DX, NEXTLINE
    INT 21H

   ;Jump to ask user continue
   JMP ASKCONTINUE

ASKCONTINUE:
   MOV AH,09H
   LEA DX, NEXTLINE
   INT 21H
   LEA DX, NEXTLINE
   INT 21H
   ;Display question to ask continue
   LEA DX, CONTINUEMSG1
   INT 21H

   MOV AH, 01H
   INT 21H

CHKDIGIT:
   ;Check for the range of input (0-9)
   ;If the input is below 0, go to error
   CMP AL, 30H
   JB DIGITERROR
   ;If the input is above 9, go to error
   CMP AL, 39H
   JA DIGITERROR
   ;If correct jump back main menu
   JMP BEFOREMM_INITIAL

DIGITERROR: 
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H
   LEA DX, NEXTLINE
   INT 21H
   ;Display the error and prompt user input again
   LEA DX, CONTINUEMSGERR1
   INT 21H
   LEA DX, NEXTLINE
   INT 21H
   JMP ASKCONTINUE

EXIT:  
   MOV AH, 09H
   ;NEWLINE
   LEA DX, NEXTLINE
   INT 21H
   LEA DX, NEXTLINE
   INT 21H
   
   ;THANK YOU MSG
   LEA DX, MSG2
   INT 21H

   ;Exit the program
   MOV AH, 4CH
   INT 21H
   
   ;Exit when user's chances are finish at login 
EXIT1:
   MOV AH, 09H
   LEA DX, NEXTLINE
   INT 21H
   LEA DX, NEXTLINE
   INT 21H
   
   ;Chances to re-enter ID and password are finish
   LEA DX, MSG5
   INT 21H
   
   LEA DX, NEXTLINE
   INT 21H

   LEA DX, NEXTLINE
   INT 21H

   ;Exit the program
   MOV AH, 4CH
   INT 21H

MAIN ENDP
END MAIN